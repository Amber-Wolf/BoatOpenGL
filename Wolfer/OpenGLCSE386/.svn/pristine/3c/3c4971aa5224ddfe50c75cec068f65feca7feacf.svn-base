#ifndef ___VISUAL_OBJECT_H___
#define ___VISUAL_OBJECT_H___

#include <math.h>
#include <iostream>

using namespace std;

#include <GL/glew.h>
#include <GL/freeglut.h>

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <glm/gtc/swizzle.hpp>
#include <glm/gtc/constants.hpp>

using namespace glm;

#include "LoadShaders.h"
#include "OpenGLApplicationBase.h"

class VisualObject
{
public: 

	// Constructor
	//VisualObject(OpenGLApplicationBase * OpenGLApp);

	virtual void initialize() = 0;

	// Preform drawing operations
	virtual void draw(){};

	virtual void update(float elapsedTimeSeconds){};

protected:

	GLuint vertexArrayObject; // holds various data related to a collection of data

	OpenGLApplicationBase* OpenGLAPP;

}; // end VisualObject class


#endif /* ___VISUAL_OBJECT_H___ */


