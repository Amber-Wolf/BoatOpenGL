#include "VisualObject.h"

using namespace std;

// Initialize the static object counter
int VisualObject::objectCounter = 0;

VisualObject::VisualObject()
	:objectSerialNumber(objectCounter++)
{ }

VisualObject::VisualObject(OpenGLApplicationBase * OpenGLApp)
	:objectSerialNumber(objectCounter++), OpenGLAPP(OpenGLApp), controller(NULL)
{ }

// Preform drawing operations
void VisualObject::draw()
{
	for (unsigned int i = 0; i < children.size(); i++) {

		children[i]->draw();
	}

} // end draw


void VisualObject::update(float elapsedTimeSeconds)
{
	for (unsigned int i = 0; i < children.size(); i++) {

		children[i]->update(elapsedTimeSeconds);
	}

} // end update


int VisualObject::addChild(VisualObject * child )
{
	children.push_back(child);

	child->parent = this;

	return child->objectSerialNumber;

} // end addChild


void VisualObject::addController(Controller * controller )
{
	this->controller = controller;

	controller->target = this;

} // end addController


VisualObject* VisualObject::removeChild( int childID )
{
	unsigned int i = 0;
	VisualObject* target = NULL;

	for (; i < children.size(); i++) {

		if ( children[i]->objectSerialNumber == childID) {
			break;
		}

	}
	 
	if (i < children.size() ) {

		target = children[i];

		children.erase(children.begin() + i);
	}

	return target;

} // end removeChild


bool VisualObject::detachFromParent( )
{
	if (parent != NULL) {
		parent->removeChild(this->objectSerialNumber);
		return true;
	}
	else {
		return false;
	}

} // end detachFromParent











