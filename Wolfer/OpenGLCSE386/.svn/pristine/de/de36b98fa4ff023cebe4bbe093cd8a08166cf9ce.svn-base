#include "Diamond.h"

#include <vector>

void Diamond::buildShaders()
{
	ShaderInfo shaders[] = {
		{ GL_VERTEX_SHADER, "pVSpc.vert" },
		{ GL_FRAGMENT_SHADER, "pFSc.frag"},
		{ GL_NONE, NULL } // signals that there are no more shaders
	};

	// Read the files and create the OpenGL shader program.
	ShaderProgram = LoadShaders(shaders);

	// This program will stay in effect for all draw calls until it is 
	// replaced with another or explicitly disabled (and the 
	// fixed function pipeline is enabld) by calling glUseProgram with NULL
    //glUseProgram(ShaderProgram);

}


void Diamond::initialize()
{
	buildShaders();

	GLuint VBO;
	GLuint CBO;
	GLuint IBO;

	glGenVertexArrays (1, &vertexArrayObject); 
	glBindVertexArray( vertexArrayObject );

	vec3 v0 = vec3( 0.0f,  0.75f, 0.0f);
	vec3 v1 = vec3( -0.25f,  0.0f, 0.0f);
	vec3 v2 = vec3( 0.25f,  0.0f, 0.0f);
	vec3 v3 = vec3( 0.0f,  -0.75f, 0.0f);

	vector<vec3> v;

    v.push_back( v0 );
    v.push_back( v1 );
    v.push_back( v2 );
    v.push_back( v3 );

 	glGenBuffers(1, &VBO);
	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	glBufferData(GL_ARRAY_BUFFER, v.size() * sizeof(vec3), &v[0], GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);

	vector<vec4> c;
	 
    c.push_back( vec4(1.0f, 0.0f, 0.0f, 1.0f) );
    c.push_back( vec4(0.0f, 1.0f, 0.0f, 1.0f) );
    c.push_back( vec4(0.0f, 0.0f, 1.0f, 1.0f) );
    c.push_back( vec4(0.0f, 1.0f, 1.0f, 1.0f) );

 	glGenBuffers(1, &CBO);
	glBindBuffer(GL_ARRAY_BUFFER, CBO);
	glBufferData(GL_ARRAY_BUFFER, v.size() * sizeof(vec4), &c[0], GL_STATIC_DRAW);
	glVertexAttribPointer(2, 4, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(2);

	vector<GLuint> indices;

	indices.push_back(0);
	indices.push_back(1);
	indices.push_back(2);
	indices.push_back(3);
	indices.push_back(2);
	indices.push_back(1);

	glGenBuffers(1, &IBO);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, IBO);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices) * sizeof(GLuint), &indices[0], GL_STATIC_DRAW);

} // end initialize
 
void Diamond::draw()
{
	glUseProgram(ShaderProgram);
	glBindVertexArray(vertexArrayObject);
	glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
   
} // end draw

