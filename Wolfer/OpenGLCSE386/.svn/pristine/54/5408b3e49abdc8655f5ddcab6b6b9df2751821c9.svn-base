#include "VisualObject.h"

using namespace std;

// Initialize the static object counter
int VisualObject::objectCounter = 0;


VisualObject::VisualObject()
	:objectSerialNumber(objectCounter++)
{ }


VisualObject::VisualObject(OpenGLApplicationBase * OpenGLApp)
	:objectSerialNumber(objectCounter++), OpenGLAPP(OpenGLApp), controller(NULL)
{ }


// Preform drawing operations. Draw this object and all of its children.
void VisualObject::draw()
{
	for (unsigned int i = 0; i < children.size(); i++) {

		children[i]->draw();
	}

} // end draw


// Update this object and all of its children
void VisualObject::update(float elapsedTimeSeconds)
{
	for (unsigned int i = 0; i < children.size(); i++) {

		children[i]->update(elapsedTimeSeconds);
	}

} // end update


// Add a child to this object and set the child's parent
// to this object
void VisualObject::addChild(VisualObject * child )
{
	children.push_back(child);

	child->parent = this;

} // end addChild


// Set the controller for this object and set the controller
// target to this object.
void VisualObject::addController(Controller * controller )
{

	this->controller = controller;

	controller->target = this;

} // end addController

//// Remove the Controller object for this object
//// Untested method
//void VisualObject::removeController()
//{
//	controller->target = NULL;
//	
//	this->controller = NULL;
//
//} // end removeController


// Look for a child of this object and remove it is it 
// is found. Return a reference to the removed child
VisualObject* VisualObject::removeChild( int childID )
{
	unsigned int i = 0;
	VisualObject* removed = NULL;

	// Search for the specific child
	for (; i < children.size(); i++) {

		if ( children[i]->objectSerialNumber == childID) {
			break;
		}

	}
	
	// Remove the child if it was found
	if (i < children.size() ) {

		removed = children[i];
		removed->parent = NULL;

		children.erase(children.begin() + i);
	}

	return removed;

} // end removeChild


// Detach this object from its parent (if it has one).
bool VisualObject::detachFromParent( )
{
	if (parent != NULL) {
		parent->removeChild(this->objectSerialNumber);
		parent = NULL;
		return true;
	}
	else {
		return false;
	}

} // end detachFromParent











